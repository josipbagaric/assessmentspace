# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-03-31 06:01
from __future__ import unicode_literals

import api.validators
import colorfield.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import django_markdown.models
import phonenumber_field.modelfields
import timezone_field.fields
import tinymce.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Last updated')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', tinymce.models.HTMLField(blank=True, verbose_name='Description')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(verbose_name='End Date')),
                ('public', models.BooleanField(default=False, verbose_name='Make assessment details publicly available?')),
            ],
            options={
                'permissions': (('view_assessment', 'Can view Assessment'), ('edit_assessment', 'Can edit Assessment')),
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='AssessmentDay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentInterview',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Last updated')),
                ('note', tinymce.models.HTMLField(blank=True, verbose_name='Note')),
            ],
            options={
                'permissions': (('view_assessment_interview', 'Can view AssessmentInterview'),),
            },
        ),
        migrations.CreateModel(
            name='AssessmentInterviewResult',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Last updated')),
                ('score', models.IntegerField(validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(1)])),
                ('note', tinymce.models.HTMLField(blank=True, verbose_name='Note')),
            ],
            options={
                'permissions': (('view_assessment_interview_result', 'Can view AssessmentInterviewResult'),),
                'ordering': ('-updated',),
            },
        ),
        migrations.CreateModel(
            name='AssessmentInterviewType',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Last updated')),
                ('name', models.CharField(max_length=100)),
                ('description', tinymce.models.HTMLField(blank=True, verbose_name='Description')),
                ('color', colorfield.fields.ColorField(default='#00FF00', max_length=10)),
                ('assessor_material', models.FileField(blank=True, default=None, null=True, upload_to='material/assessor/', validators=[api.validators.validate_pdf])),
                ('candidate_material', models.FileField(blank=True, default=None, null=True, upload_to='material/candidate/', validators=[api.validators.validate_pdf])),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interview_types', to='api.Assessment', verbose_name='Assessment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssessmentLogEvent',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Last updated')),
                ('action', models.CharField(choices=[('J', 'joined an interview'), ('A', 'assessed a candidate')], default='J', max_length=100, verbose_name='Action')),
                ('by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='log_event', to=settings.AUTH_USER_MODEL)),
                ('interview', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='log_event', to='api.AssessmentInterview')),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='Candidate',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Last updated')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True)),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='Address')),
                ('city', models.CharField(blank=True, max_length=1000, null=True, verbose_name='City')),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('timezone', timezone_field.fields.TimeZoneField(default='Europe/London')),
                ('cv', models.FileField(blank=True, default=None, null=True, upload_to='cv/', validators=[api.validators.validate_pdf], verbose_name='CV')),
                ('note', tinymce.models.HTMLField(blank=True, verbose_name='Note')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'permissions': (('view_candidate', 'Can view Candidate'),),
                'ordering': ('-user__date_joined',),
            },
        ),
        migrations.CreateModel(
            name='Competency',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Last updated')),
                ('name', models.CharField(max_length=100)),
                ('description', tinymce.models.HTMLField(blank=True, verbose_name='Description')),
                ('min_points', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(1)])),
                ('max_points', models.IntegerField(default=10, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(1)])),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='competencies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Competencies',
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Last updated')),
                ('timezone', timezone_field.fields.TimeZoneField(default='Europe/London')),
                ('agenda_view', models.CharField(choices=[('agendaDay', 'Day'), ('agendaWeek', 'Week'), ('month', 'Month'), ('listWeek', 'List')], default='listWeek', max_length=100, verbose_name='Default agenda view')),
            ],
            options={
                'permissions': (('view_employee', 'Can view Employee'),),
                'ordering': ('-user__date_joined',),
            },
        ),
        migrations.CreateModel(
            name='ExtraEvent',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Last updated')),
                ('description', tinymce.models.HTMLField(blank=True, verbose_name='Description')),
                ('start_time', models.DateTimeField(verbose_name='Start Time')),
                ('end_time', models.DateTimeField(verbose_name='End Time')),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Assessment', verbose_name='Assessment')),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Candidate', verbose_name='Candidate')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='extra_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-start_time',),
            },
        ),
        migrations.CreateModel(
            name='ExtraEventType',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Last updated')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', tinymce.models.HTMLField(blank=True, verbose_name='Description')),
                ('color', colorfield.fields.ColorField(default='#00FF00', max_length=10)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Assessment', verbose_name='Assessment')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='extra_event_types', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Interview',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Last updated')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', django_markdown.models.MarkdownField(blank=True, verbose_name='Description')),
                ('assessor_material', models.FileField(blank=True, default=None, null=True, upload_to='material/assessor/', validators=[api.validators.validate_pdf])),
                ('candidate_material', models.FileField(blank=True, default=None, null=True, upload_to='material/candidate/', validators=[api.validators.validate_pdf])),
                ('start', models.DateTimeField(verbose_name='Start Time')),
                ('end', models.DateTimeField(verbose_name='End Time')),
                ('assessors', models.ManyToManyField(to='api.Employee', verbose_name='Assessors')),
                ('candidate', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Candidate', verbose_name='Candidate')),
                ('competencies', models.ManyToManyField(to='api.Competency', verbose_name='Competencies')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='interviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('view_interview', 'Can view Interview'),),
                'ordering': ('-start',),
            },
        ),
        migrations.CreateModel(
            name='Office',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Last updated')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('address_line_1', models.CharField(blank=True, max_length=100, null=True, verbose_name='Address')),
                ('address_line_2', models.CharField(blank=True, max_length=100, null=True, verbose_name='Apt/Suite')),
                ('zip_code', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('timezone', timezone_field.fields.TimeZoneField(default='Europe/London')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='offices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Last updated')),
                ('score', models.IntegerField(validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(1)])),
                ('note', tinymce.models.HTMLField(blank=True, verbose_name='Note')),
                ('assesor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Employee', verbose_name='Assessor')),
                ('competency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Competency', verbose_name='Competency')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='results', to=settings.AUTH_USER_MODEL)),
                ('interview', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Interview', verbose_name='Interview')),
            ],
            options={
                'permissions': (('view_result', 'Can view Result'),),
                'ordering': ('-updated',),
            },
        ),
        migrations.CreateModel(
            name='RoleAffinity',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Last updated')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', tinymce.models.HTMLField(blank=True, verbose_name='Description')),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Assessment', verbose_name='Assessment')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='role_affinities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Role affinities',
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Last updated')),
                ('name', models.CharField(max_length=100)),
                ('building', models.CharField(blank=True, max_length=100, null=True)),
                ('floor', models.CharField(blank=True, max_length=100, null=True)),
                ('size', models.CharField(choices=[('S', 'Small'), ('M', 'Medium'), ('L', 'Large')], default='M', max_length=20, verbose_name='Room size')),
                ('note', tinymce.models.HTMLField(blank=True, verbose_name='Note')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to=settings.AUTH_USER_MODEL)),
                ('office', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='api.Office')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Last updated')),
                ('assessment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='schedule', to='api.Assessment')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='schedule', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Timeslot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField(verbose_name='Start time')),
                ('end_time', models.TimeField(verbose_name='End time')),
                ('assessment_day', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timeslots', to='api.AssessmentDay')),
            ],
        ),
        migrations.AddField(
            model_name='interview',
            name='office',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Office', verbose_name='Office'),
        ),
        migrations.AddField(
            model_name='extraevent',
            name='extra_event_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.ExtraEventType', verbose_name='Type'),
        ),
        migrations.AddField(
            model_name='extraevent',
            name='room',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Room', verbose_name='Room'),
        ),
        migrations.AddField(
            model_name='employee',
            name='office',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='employees', to='api.Office'),
        ),
        migrations.AddField(
            model_name='employee',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='assessmentinterviewtype',
            name='competencies',
            field=models.ManyToManyField(related_name='interview_types', to='api.Competency', verbose_name='Competencies'),
        ),
        migrations.AddField(
            model_name='assessmentinterviewtype',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assessment_interview_types', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assessmentinterviewresult',
            name='assessor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Employee', verbose_name='Assessor'),
        ),
        migrations.AddField(
            model_name='assessmentinterviewresult',
            name='competency',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Competency', verbose_name='Competency'),
        ),
        migrations.AddField(
            model_name='assessmentinterviewresult',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assessment_interview_results', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assessmentinterviewresult',
            name='interview',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.AssessmentInterview', verbose_name='Interview'),
        ),
        migrations.AddField(
            model_name='assessmentinterview',
            name='assessors',
            field=models.ManyToManyField(to='api.Employee', verbose_name='Assessors'),
        ),
        migrations.AddField(
            model_name='assessmentinterview',
            name='candidate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Candidate', verbose_name='Candidate'),
        ),
        migrations.AddField(
            model_name='assessmentinterview',
            name='candidate_room',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assessment_candidate_room', to='api.Room', verbose_name='Candidate Room'),
        ),
        migrations.AddField(
            model_name='assessmentinterview',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assessment_interviews', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assessmentinterview',
            name='interview_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interviews', to='api.AssessmentInterviewType'),
        ),
        migrations.AddField(
            model_name='assessmentinterview',
            name='room',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assessment_room', to='api.Room', verbose_name='Room'),
        ),
        migrations.AddField(
            model_name='assessmentinterview',
            name='timeslot',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interviews', to='api.Timeslot'),
        ),
        migrations.AddField(
            model_name='assessmentday',
            name='candidates',
            field=models.ManyToManyField(blank=True, to='api.Candidate'),
        ),
        migrations.AddField(
            model_name='assessmentday',
            name='schedule',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='days', to='api.Schedule'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='competencies',
            field=models.ManyToManyField(related_name='assessments', to='api.Competency', verbose_name='Competencies'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assessment',
            name='office',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Office', verbose_name='Office'),
        ),
    ]
