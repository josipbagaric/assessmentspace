"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import dj_database_url

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

LOGIN_URL = '/login/'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

DOMAIN = os.getenv("DOMAIN")

# HTTPS enforcing
SECURE_SSL_REDIRECT = os.getenv("SECURE_SSL_REDIRECT", False) # or even better, enable this on the web server
SESSION_COOKIE_SECURE = os.getenv("SESSION_COOKIE_SECURE", False)
CSRF_COOKIE_SECURE = os.getenv("CSRF_COOKIE_SECURE", False)
SECURE_HSTS_SECONDS = os.getenv("SECURE_HSTS_SECONDS", 0)
SECURE_HSTS_INCLUDE_SUBDOMAINS = os.getenv("SECURE_HSTS_INCLUDE_SUBDOMAINS", False)

DEBUG = os.getenv("DEBUG", False)
ADMIN_ENABLED = os.getenv("ADMIN_ENABLED", False)

ALLOWED_HOSTS = ['*']

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'
STATICFILES_DIRS = ( os.path.join(BASE_DIR, 'static'), )

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_URL = '/media/'
MEDIA_ROOT = 'media'

STRIPE_PUBLIC_KEY = os.environ.get("STRIPE_PUBLIC_KEY", 'pk_test_YVmIeuuld4MoRRfdFTXwhtkT')
STRIPE_SECRET_KEY = os.environ.get("STRIPE_SECRET_KEY", 'sk_test_apdt0ENW63sjHcQOEpxA2kv8')

STRIPE_PLANS = [
    {
        'stripe_plan_id': 'interviewone_monthly',
        'name': 'Monthly',
        'description': 'Subscribe to assessment center service monthly and use it whenever you have the busiest assessment period.',
        'price_cents': 19900,
        'currency': 'eur',
        'interval': 'monthly',
        'per': 'month'
    },
    {
        'stripe_plan_id': 'interviewone_yearly',
        'name': 'Yearly',
        'description': 'Subscribe for a yearly subscription in order to have the assessment center app always at disposal.',
        'price_cents': 199900,
        'currency': 'eur',
        'interval': 'yearly',
        'per': 'year'
    }
]


# Application definition
SHARED_APPS = (
    'tenant_schemas',  # mandatory, should always be before any django app
    'clients', # you must list the app where your tenant model resides in
    'landing',
    'interviews',
    'api',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django_countries',
    'colorfield',
    'tinymce',
    'guardian',
    'rest_framework',
    'crispy_forms',
    'formtools',
    'timezone_field',
    'django_markdown',
    'django_extensions',
    'phonenumber_field',
)
TENANT_APPS = (
    'django.contrib.contenttypes',
    'django.contrib.auth',
    
    # your tenant-specific apps
    'interviews',
    'api',
)
INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]

DEFAULT_FILE_STORAGE = 'tenant_schemas.storage.TenantFileSystemStorage'
TENANT_MODEL = "clients.Client"
ANONYMOUS_USER_ID = None

MIDDLEWARE = [
    'tenant_schemas.middleware.TenantMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.common.BrokenLinkEmailsMiddleware',
]

# This is the urlconf that will be used for any subdomain that is not
# listed in ``SUBDOMAIN_URLCONFS``, or if the HTTP ``Host`` header does not
# contain the correct domain.
# If you're planning on using wildcard subdomains, this should correspond
# to the urlconf that will be used for the wildcard subdomain. For example,
# 'accountname.mysite.com' will load the ROOT_URLCONF, since it is not
# defined in ``SUBDOMAIN_URLCONFS``.
ROOT_URLCONF = 'app.urls'

# A dictionary of urlconf module paths, keyed by their subdomain.
SUBDOMAIN_URLCONFS = {
    None: 'app.urls',  # no subdomain
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR + '/templates/'
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ.get('DB_ENGINE'),
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASS'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': os.environ.get('DB_PORT'),
    }
}

DATABASE_ROUTERS = (
    'tenant_schemas.routers.TenantSyncRouter',
)

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Update database configuration with $DATABASE_URL.
db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(db_from_env)

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend', # default
    'guardian.backends.ObjectPermissionBackend',
)

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = False

CRISPY_TEMPLATE_PACK = 'bootstrap4'

EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'josbagaric@gmail.com'
EMAIL_HOST_PASSWORD = 'KoBaS123'
EMAIL_PORT = 587
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

ADMINS = [('Josip', 'josbagaric@gmail.com')]
MANAGERS = [('Josip', 'josbagaric@gmail.com')]

SITE_ID = 1
